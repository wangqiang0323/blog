<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue源码（nextTick）</title>
      <link href="/blog/2021/03256587.html"/>
      <url>/blog/2021/03256587.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue源码（nextTick）"><a href="#Vue源码（nextTick）" class="headerlink" title="Vue源码（nextTick）"></a>Vue源码（nextTick）</h1><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>注意看注释</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* @flow */</span><span class="token comment">/* globals MutationObserver */</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> noop <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'shared/util'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> handleError <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./error'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isIE<span class="token punctuation">,</span> isIOS<span class="token punctuation">,</span> isNative <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./env'</span><span class="token keyword">export</span> <span class="token keyword">let</span> isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment">// by wq 首先创建一个数组，用来存放回调数组</span><span class="token keyword">let</span> pending <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">function</span> <span class="token function">flushCallbacks</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// by wq 遍历执行callbacks数组方法</span>  pending <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">const</span> copies <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  callbacks<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> copies<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    copies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> timerFunc<span class="token comment">// by wq promise > MutationObserver > setImmediate > setTimeout 兼容做法, </span><span class="token comment">// 实现timerFunc, 原理事件循环</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>Promise<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isIOS<span class="token punctuation">)</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>noop<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isIE <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> MutationObserver <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>  <span class="token function">isNative</span><span class="token punctuation">(</span>MutationObserver<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token comment">// PhantomJS and iOS 7.x</span>  MutationObserver<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'[object MutationObserverConstructor]'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Use MutationObserver where native Promise is not available,</span>  <span class="token comment">// e.g. PhantomJS, iOS7, Android 4.4</span>  <span class="token comment">// (#6466 MutationObserver is unreliable in IE11)</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">const</span> observer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutationObserver</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token keyword">const</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token punctuation">)</span>  observer<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>textNode<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    characterData<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    counter <span class="token operator">=</span> <span class="token punctuation">(</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span>    textNode<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  isUsingMicroTask <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> setImmediate <span class="token operator">!==</span> <span class="token string">'undefined'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isNative</span><span class="token punctuation">(</span>setImmediate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Fallback to setImmediate.</span>  <span class="token comment">// Technically it leverages the (macro) task queue,</span>  <span class="token comment">// but it is still a better choice than setTimeout.</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setImmediate</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// Fallback to setTimeout.</span>  <span class="token function-variable function">timerFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>flushCallbacks<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * by wq 将回调函数放在callbacks 中 * @param cb 函数 * @param ctx  */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">nextTick</span> <span class="token punctuation">(</span><span class="token parameter">cb<span class="token operator">?</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> ctx<span class="token operator">?</span><span class="token operator">:</span> Object</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> _resolve  callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">cb</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">handleError</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> ctx<span class="token punctuation">,</span> <span class="token string">'nextTick'</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>_resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">_resolve</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pending <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token function">timerFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// $flow-disable-line</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cb <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Promise <span class="token operator">!==</span> <span class="token string">'undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      _resolve <span class="token operator">=</span> resolve    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="什么时候用到-nextTick"><a href="#什么时候用到-nextTick" class="headerlink" title="什么时候用到 $nextTick"></a>什么时候用到 $nextTick</h3><p>当需要操作dom时，一般需要用到<code>$nextTick</code>。</p><p>为什么呢？</p><p>每次Vue数据状态发生变化，会异步更新dom节点（diff算法，异步更新原理），这都属于主线任务（可参考事件循环）。<br>此时操作dom，可能dom节点都还没有生成。放在<code>$nextTick</code>里面（即异步处理的方式），可保证在dom节点更新完毕之后执行。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>$nextTick</code> 就是<code>promise</code>那套异步函数的原理。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React组件</title>
      <link href="/blog/2021/032462118.html"/>
      <url>/blog/2021/032462118.html</url>
      
        <content type="html"><![CDATA[<h1 id="React组件"><a href="#React组件" class="headerlink" title="React组件"></a>React组件</h1><ul><li><a href="https://github.com/wix/react-native-calendars">日历组件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/blog/2021/03222526.html"/>
      <url>/blog/2021/03222526.html</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><h3 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h3><ul><li>Basic Hooks<ul><li>useState</li><li>useEffect</li><li>useContext</li></ul></li><li>Additional Hooks<ul><li>useReducer</li><li>useCallback</li><li>useMemo</li><li>useRef</li><li>useImperativeHandle</li><li>useLayoutEffect</li><li>useDebugValue</li></ul></li></ul><p><code>useMemo</code>, <code>useCallback</code> 都是根据第二个参数（依赖项数组）去重新渲染组件或执行回调。 这种优化有助于避免在每次渲染时都进行高开销的计算</p><p><code>useEffect</code>是在<code>dom</code>渲染完成后，才执行。每次重新渲染都会销毁之前的<code>effect</code>，重建新的<code>effect</code>，以获取到最新的值，并执行effect。 可通过第二个参数，添加依赖项，只有依赖项变化才执行<code>useEffect</code>，以优化性能。<code>useEffect</code>不会造成阻塞。</p><p>延迟渲染</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token function">setShowChild</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>showChild <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>Child <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码(keep-alive)</title>
      <link href="/blog/2021/031910385.html"/>
      <url>/blog/2021/031910385.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue源码-keep-alive"><a href="#Vue源码-keep-alive" class="headerlink" title="Vue源码(keep-alive)"></a>Vue源码(keep-alive)</h1><h3 id="官方代码-version-2-6-12"><a href="#官方代码-version-2-6-12" class="headerlink" title="官方代码 (version: 2.6.12)"></a>官方代码 (version: 2.6.12)</h3><p>详见注释部分</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* @flow */</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isRegExp<span class="token punctuation">,</span> remove <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'shared/util'</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getFirstComponentChild <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'core/vdom/helpers/index'</span>type VNodeCache <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>key<span class="token operator">:</span> string<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token operator">?</span>VNode <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getComponentName</span> <span class="token punctuation">(</span><span class="token parameter">opts<span class="token operator">:</span> <span class="token operator">?</span>VNodeComponentOptions</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span>string <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> opts <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>opts<span class="token punctuation">.</span>Ctor<span class="token punctuation">.</span>options<span class="token punctuation">.</span>name <span class="token operator">||</span> opts<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">matches</span> <span class="token punctuation">(</span><span class="token parameter">pattern<span class="token operator">:</span> string <span class="token operator">|</span> RegExp <span class="token operator">|</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span> name<span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> pattern <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> pattern<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/* istanbul ignore next */</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">pruneCache</span> <span class="token punctuation">(</span><span class="token parameter">keepAliveInstance<span class="token operator">:</span> any<span class="token punctuation">,</span> filter<span class="token operator">:</span> Function</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> cache<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> _vnode <span class="token punctuation">&#125;</span> <span class="token operator">=</span> keepAliveInstance  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cachedNode<span class="token operator">:</span> <span class="token operator">?</span>VNode <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>cachedNode<span class="token punctuation">.</span>componentOptions<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> _vnode<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 销毁缓存的实例 * @param cache * @param key * @param keys * @param current */</span><span class="token keyword">function</span> <span class="token function">pruneCacheEntry</span> <span class="token punctuation">(</span>  <span class="token parameter">cache<span class="token operator">:</span> VNodeCache<span class="token punctuation">,</span>  key<span class="token operator">:</span> string<span class="token punctuation">,</span>  keys<span class="token operator">:</span> Array<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token punctuation">,</span>  current<span class="token operator">?</span><span class="token operator">:</span> VNode</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> cached <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span>  <span class="token comment">// 判断是否已缓存并且不是当前实例</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>current <span class="token operator">||</span> cached<span class="token punctuation">.</span>tag <span class="token operator">!==</span> current<span class="token punctuation">.</span>tag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cached<span class="token punctuation">.</span>componentInstance<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">// 销毁缓存实例后，remove对于的key</span>  cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>  <span class="token function">remove</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> patternTypes<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Function<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> Array<span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  name<span class="token operator">:</span> <span class="token string">'keep-alive'</span><span class="token punctuation">,</span>  abstract<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// keep-alive的三个属性</span>  props<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    include<span class="token operator">:</span> patternTypes<span class="token punctuation">,</span>    exclude<span class="token operator">:</span> patternTypes<span class="token punctuation">,</span>    max<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">created</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建存放缓存实例的cache以及存放响应的[]key</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>cache <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">destroyed</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 遍历销毁所有实例</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>cache<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>keys<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 判断cache中的实例，不在include数组中，则销毁</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'include'</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token function">matches</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// 判断cache中的实例，在exclude数组中，则销毁</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">'exclude'</span><span class="token punctuation">,</span> <span class="token parameter">val</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">pruneCache</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token parameter">name</span> <span class="token operator">=></span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function">render</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> slot <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$slots<span class="token punctuation">.</span>default    <span class="token comment">// 获取第一个子组件</span>    <span class="token keyword">const</span> vnode<span class="token operator">:</span> VNode <span class="token operator">=</span> <span class="token function">getFirstComponentChild</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span>    <span class="token keyword">const</span> componentOptions<span class="token operator">:</span> <span class="token operator">?</span>VNodeComponentOptions <span class="token operator">=</span> vnode <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>componentOptions    <span class="token keyword">if</span> <span class="token punctuation">(</span>componentOptions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// check pattern</span>      <span class="token keyword">const</span> name<span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>componentOptions<span class="token punctuation">)</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> include<span class="token punctuation">,</span> exclude <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>        <span class="token comment">// not included</span>        <span class="token punctuation">(</span>include <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>        <span class="token comment">// excluded</span>        <span class="token punctuation">(</span>exclude <span class="token operator">&amp;&amp;</span> name <span class="token operator">&amp;&amp;</span> <span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> vnode      <span class="token punctuation">&#125;</span>      <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> cache<span class="token punctuation">,</span> keys <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token comment">// 获取key值</span>      <span class="token keyword">const</span> key<span class="token operator">:</span> <span class="token operator">?</span>string <span class="token operator">=</span> vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token keyword">null</span>        <span class="token comment">// same constructor may get registered as different local components</span>        <span class="token comment">// so cid alone is not enough (#3269)</span>        <span class="token operator">?</span> componentOptions<span class="token punctuation">.</span>Ctor<span class="token punctuation">.</span>cid <span class="token operator">+</span> <span class="token punctuation">(</span>componentOptions<span class="token punctuation">.</span>tag <span class="token operator">?</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">::</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>componentOptions<span class="token punctuation">.</span>tag<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token operator">:</span> vnode<span class="token punctuation">.</span>key    <span class="token comment">// 如果已经有缓存</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 取出对于的缓存，并放在keys数组最后</span>        vnode<span class="token punctuation">.</span>componentInstance <span class="token operator">=</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>componentInstance        <span class="token comment">// make current key freshest</span>        <span class="token function">remove</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> key<span class="token punctuation">)</span>        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如果没有缓存，则缓存，</span>        cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> vnode        keys<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>              <span class="token comment">// 判断是否超过最大缓存组件数max，若超过，则销毁keys数组中的第一个实例</span>        <span class="token comment">// prune oldest entry </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keys<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_vnode<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      vnode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>keepAlive <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> vnode <span class="token operator">||</span> <span class="token punctuation">(</span>slot <span class="token operator">&amp;&amp;</span> slot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><code>keep-alive</code> 有三个属性 <code>include</code> <code>exclude</code> <code>max</code></li><li><code>keep-alive</code> 是一个抽象组件，Vue 的文档没有提这个概念，实际上它在组件实例建立父子关系的时候会被忽略</li><li><code>keep-alive</code> 只处理第一个子元素，所以一般和它搭配使用的有 component 动态组件或者是 <code>router-view</code>，这点要牢记</li><li><code>keep-alive</code> 采用LRU缓存策略，即最近的缓存放在[]keys最后，当超过max时，从keys[0]删除。</li></ol><p>另外，keep-alive不会执行<code>created</code>和<code>mounted</code>钩子，若想进行一些操作，可使用<code>actived</code>和<code>deactivated</code></p><h3 id="参考博客："><a href="#参考博客：" class="headerlink" title="参考博客："></a>参考博客：</h3><p><a href="https://ustbhuangyi.github.io/vue-analysis/v2/extend/keep-alive.html#keep-alive">Vue.js技术揭秘</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 深入 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题</title>
      <link href="/blog/2021/031848462.html"/>
      <url>/blog/2021/031848462.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue面试题"><a href="#Vue面试题" class="headerlink" title="Vue面试题"></a>Vue面试题</h1><ol><li><p>keep-alive的作用及原理</p></li><li><p>computed实现原理，及与watch的区别</p><ul><li>computed 每次都会重新计算吗？</li></ul></li><li><p>vux</p></li><li><p>vue-router</p></li><li><p>双向绑定原理</p></li><li><p>自定义组件，如何实现<code>v-model</code></p><p> <code>v-model</code>实际上是<code>value</code>和<code>@input</code>二者共同实现的</p></li><li></li><li><p>$nextTick实现原理</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript面试题</title>
      <link href="/blog/2021/03183927.html"/>
      <url>/blog/2021/03183927.html</url>
      
        <content type="html"><![CDATA[<h1 id="Javascript面试题"><a href="#Javascript面试题" class="headerlink" title="Javascript面试题"></a>Javascript面试题</h1><h3 id="1-闭包原理"><a href="#1-闭包原理" class="headerlink" title="1. 闭包原理"></a>1. 闭包原理</h3><h3 id="2-http缓存"><a href="#2-http缓存" class="headerlink" title="2. http缓存"></a>2. http缓存</h3><h3 id="3-防抖和节流"><a href="#3-防抖和节流" class="headerlink" title="3. 防抖和节流"></a>3. 防抖和节流</h3><h3 id="4-安全策略（XSS-CROS等）"><a href="#4-安全策略（XSS-CROS等）" class="headerlink" title="4. 安全策略（XSS, CROS等）"></a>4. 安全策略（XSS, CROS等）</h3><h3 id="5-call、apply、bind区别"><a href="#5-call、apply、bind区别" class="headerlink" title="5. call、apply、bind区别"></a>5. call、apply、bind区别</h3><h3 id="6-bind函数实现"><a href="#6-bind函数实现" class="headerlink" title="6. bind函数实现"></a>6. bind函数实现</h3><h3 id="7-事件捕获、事件冒泡和事件委托"><a href="#7-事件捕获、事件冒泡和事件委托" class="headerlink" title="7. 事件捕获、事件冒泡和事件委托"></a>7. 事件捕获、事件冒泡和事件委托</h3><p><a href="https://zhuanlan.zhihu.com/p/39567900">参考</a></p><p>W3C：element.addEventListener（”click/mouseover…”,fn,boolean）第三个参数为true（捕获） 为false（冒泡）</p><h3 id="8-get和post的区别"><a href="#8-get和post的区别" class="headerlink" title="8. get和post的区别"></a>8. get和post的区别</h3><p><a href="https://blog.fundebug.com/2019/02/22/compare-http-method-get-and-post/">参考</a></p><ul><li><p>参数</p><p>  Get方法参数拼接在url中，写在 ? 后面，用 &amp; 分割。（当然也可以自己约定参数的写法）<br>  Post方法参数放在body中</p></li><li><p>安全性</p><p>  按照网上大部分文章的解释，POST 比 GET 安全，因为数据在地址栏上不可见。</p><p>  然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文。</p><p>  要想安全传输，就只有加密，也就是 HTTPS。</p></li><li><p>长度限制 </p><p>  在网上看到很多关于两者区别的文章都有这一条，提到浏览器地址栏输入的参数是有限的。</p><p>  首先说明一点，HTTP 协议没有 Body 和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因。</p><p>  浏览器原因就不说了，服务器是因为处理长 URL 要消耗比较多的资源，为了性能和安全（防止恶意构造长 URL 来攻击）考虑，会给 URL 长度加限制。</p></li></ul><h3 id="9-HTTP报文结构"><a href="#9-HTTP报文结构" class="headerlink" title="9. HTTP报文结构"></a>9. HTTP报文结构</h3><p><a href="https://www.jianshu.com/p/e29a327f9441">参考</a></p><p>一个HTTP请求报文由四个部分组成：请求行、请求头部、空行、请求数据。</p><h3 id="10-前端模块化"><a href="#10-前端模块化" class="headerlink" title="10. 前端模块化"></a>10. 前端模块化</h3><p><a href="https://zhuanlan.zhihu.com/p/112068916">参考</a></p><h3 id="11-promise"><a href="#11-promise" class="headerlink" title="11. promise"></a>11. promise</h3><ul><li><p>异步原理（三种状态，pending、fulfilled、rejected,同一时间只能存在一种状态,且状态一旦改变就不能再变。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 打印结果：2  考察点 promise同一时间只能存在一种状态,且状态一旦改变就不能再变。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>promise.all实现思路</p></li></ul><p><a href="https://github.com/mqyqingfeng/Blog">参考指南</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强制缓存和协商缓存</title>
      <link href="/blog/2021/031756648.html"/>
      <url>/blog/2021/031756648.html</url>
      
        <content type="html"><![CDATA[<h1 id="强制缓存和协商缓存"><a href="#强制缓存和协商缓存" class="headerlink" title="强制缓存和协商缓存"></a>强制缓存和协商缓存</h1><p>首先，缓存规则是由服务器返回给客户端的，包含在响应header中。</p><h2 id="强制缓存"><a href="#强制缓存" class="headerlink" title="强制缓存"></a>强制缓存</h2><p>对于强制缓存，有两个字段标识失效规则（Expires/Cache-Control）。</p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>Cache-Control 是最重要的规则。常见的取值有private、public、no-cache、max-age，no-store，默认为private。</p><ul><li>private:             客户端可以缓存</li><li>public:              客户端和代理服务器都可缓存（前端的同学，可以认为public和private是一样的）</li><li>max-age=xxx:   缓存的内容将在 xxx 秒后失效</li><li>no-cache:          需要使用对比缓存来验证缓存数据（后面介绍）</li><li>no-store:           所有内容都不会缓存，强制缓存，对比缓存都不会触发（对于前端开发来说，缓存越多越好，so…基本上和它说886）</li></ul><p>强制缓存：即客户端现访问浏览器缓存，</p><h2 id="对比缓存-协商缓存"><a href="#对比缓存-协商缓存" class="headerlink" title="对比缓存 / 协商缓存"></a>对比缓存 / 协商缓存</h2><p>对比缓存，顾名思义，需要进行比较判断是否可以使用缓存。<br>浏览器第一次请求数据时，服务器会将缓存标识与数据一起返回给客户端，客户端将二者备份至缓存数据库中。<br>再次请求数据时，客户端将备份的缓存标识发送给服务器，服务器根据缓存标识进行判断，判断成功后，返回304状态码，通知客户端比较成功，可以使用缓存数据。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>对于强制缓存，服务器通知浏览器一个缓存时间，在缓存时间内，下次请求，直接用缓存，不在时间内，执行比较缓存策略。</li><li>对于比较缓存，将缓存信息中的Etag和Last-Modified通过请求发送给服务器，由服务器校验，返回304状态码时，浏览器直接使用缓存。</li></ul><h2 id="思考：当发版时，如何解决浏览器缓存，保证用户看到新的页面？"><a href="#思考：当发版时，如何解决浏览器缓存，保证用户看到新的页面？" class="headerlink" title="思考：当发版时，如何解决浏览器缓存，保证用户看到新的页面？"></a>思考：当发版时，如何解决浏览器缓存，保证用户看到新的页面？</h2><ul><li>hash</li><li>时间戳</li><li>版本号</li></ul><blockquote><p><a href="https://www.cnblogs.com/chenqf/p/6386163.html">彻底弄懂HTTP缓存机制及原理</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React与Vue比较</title>
      <link href="/blog/2021/031656855.html"/>
      <url>/blog/2021/031656855.html</url>
      
        <content type="html"><![CDATA[<h1 id="React与Vue比较"><a href="#React与Vue比较" class="headerlink" title="React与Vue比较"></a>React与Vue比较</h1><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><ul><li>React和Vue都采用虚拟dom</li><li>都有组件化的思想，提高组件复用</li><li>都采用了模版语言</li><li>都优化了页面更新渲染机制（一次事件循环，更新一次。react通过setState实现，vue通过异步函数，如promise.then, setTimeout）</li></ul><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><ul><li>React采用单向数据流，而Vue采用双向绑定（虽然也可实现单向数据流）</li><li>React推荐All In JS的思想，更像是一种思想而不是框架，代码层面更方便理解（因为数据流很清晰）；<br>而Vue更像是一种框架，帮我们封装了数据的双向绑定，提供了生命周期钩子（React class写法也有）；</li><li>vue相对更易用，更容易上手。react得学习typescript，jsx等相关知识。</li><li>diff算法不同。如list列表，react会比较第一个字节点，如果不同，删除重建。vue会进行</li></ul>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native搭建环境中遇到的问题</title>
      <link href="/blog/2021/031651881.html"/>
      <url>/blog/2021/031651881.html</url>
      
        <content type="html"><![CDATA[<h1 id="React-Native搭建环境中遇到的问题"><a href="#React-Native搭建环境中遇到的问题" class="headerlink" title="React Native搭建环境中遇到的问题"></a>React Native搭建环境中遇到的问题</h1><h3 id="环境搭建场景问题："><a href="#环境搭建场景问题：" class="headerlink" title="环境搭建场景问题："></a>环境搭建场景问题：</h3><ol><li>mac 下解决 EMFILE: too many open files, watch。。。</li></ol><ul><li>brew install watchman</li></ul><ol start="2"><li>mac 下，yarn run pod_install 安装问题。。</li></ol><ul><li>从其他同事电脑拷贝 ~/Library/Caches/CocoaPods 到本地（特别注意，需要使用本机的 version 文件替换其他同事下 Pods 下的 version 文件）</li><li>拷贝完成后，再运行一次yarn run pod_install</li></ul><ol start="3"><li>mac 下，12.3 版本的 xcode 下，安装 pod，出现 ：Build issue with Xcode 12.3 - file not found #include “ruby/config.h”</li></ol><ul><li><a href="https://github.com/CocoaPods/CocoaPods/issues/10286">https://github.com/CocoaPods/CocoaPods/issues/10286</a><br>cd $(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk/System/Library/<br>Frameworks/Ruby.framework/Versions/2.6/usr/include/ruby-2.6.0 &amp;&amp; ln -s universal-darwin20 universal-darwin19</li></ul><ol start="4"><li>mac 下，找不到 ios/bundle 目录</li></ol><ul><li>手动创建 ios/bundle 目录</li></ul><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ol><li>需安装<a href="https://github.com/infinitered/reactotron/releases">reactotron</a> ，根据自己的系统安装对应的应用即可</li><li>打开安装好的 reactotron 应用，重启模拟器就 ok</li><li>如果是安卓模拟器，需进入<code>Reactotron.ts</code>文件，将第 8 行 host 填自己本地 ip 即可(port 不用)</li><li>在想调试的地方 console.react(…yourContent)即可在应用上看到</li></ol>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发环境 </tag>
            
            <tag> 框架 </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/blog/2021/031635375.html"/>
      <url>/blog/2021/031635375.html</url>
      
        <content type="html"><![CDATA[<h1 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h1><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * 防抖 * @param fn * @param wait * @returns &#123;function(): void&#125; */</span><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** *  * @param fn * @param wait */</span><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> wait</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>        timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span>            <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>            timer <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
